import type { IErrorResult, IReqError } from "../types";
export declare function badRequest(args: IReqError): IErrorResult;
export declare function unauthorized(args: IReqError): IErrorResult;
export declare function paymentRequired(args: IReqError): IErrorResult;
export declare function forbidden(args: IReqError): IErrorResult;
export declare function notFound(args: IReqError): IErrorResult;
export declare function methodNotAllowed(args: IReqError): IErrorResult;
export declare function notAcceptable(args: IReqError): IErrorResult;
export declare function proxyAuthenticationRequired(args: IReqError): IErrorResult;
export declare function requestTimeout(args: IReqError): IErrorResult;
export declare function conflict(args: IReqError): IErrorResult;
export declare function gone(args: IReqError): IErrorResult;
export declare function lengthRequired(args: IReqError): IErrorResult;
export declare function preconditionFailed(args: IReqError): IErrorResult;
export declare function requestEntityTooLarge(args: IReqError): IErrorResult;
export declare function requestUriTooLong(args: IReqError): IErrorResult;
export declare function unsupportedMediaType(args: IReqError): IErrorResult;
export declare function requestedRangeNotSatisfiable(args: IReqError): IErrorResult;
export declare function expectationFailed(args: IReqError): IErrorResult;
export declare function imATeapot(args: IReqError): IErrorResult;
export declare function insufficientSpaceOnResource(args: IReqError): IErrorResult;
export declare function unProcessableEntity(args: IReqError): IErrorResult;
export declare function locked(args: IReqError): IErrorResult;
export declare function failedDependency(args: IReqError): IErrorResult;
export declare function preconditionRequired(args: IReqError): IErrorResult;
export declare function tooManyRequests(args: IReqError): IErrorResult;
export declare function requestHeaderFieldsTooLarge(args: IReqError): IErrorResult;
export declare function unavailableForLegalReasons(args: IReqError): IErrorResult;
